{"version":3,"sources":["features/counter/Counter.module.css","logo.svg","features/counter/counterAPI.js","features/counter/counterSlice.js","features/color/setcolor.js","App.js","action/index.js","reducer/index.js","reducer/home.js","reducer/albumresp.js","store/store.js","serviceWorker.js","index.js"],"names":["module","exports","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","alert","JSON","stringify","extraReducers","builder","addCase","pending","fulfilled","actions","color","setcolor","App","myState","useSelector","dispatch","useDispatch","useState","dataphoto","setphotodata","setdataalbum","useEffect","callalbums","callphoto","Photocall","AlbumCall","axios","method","url","responseType","then","type","console","log","catch","err","className","map","item","i","src","thumbnailUrl","width","id","title","rootReducer","combineReducers","persistConfig","key","storage","persistedReducer","persistReducer","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","persistStore","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3fba9816.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__1C_4f\",\"value\":\"Counter_value__1d0te\",\"button\":\"Counter_button__1xpSV\",\"textbox\":\"Counter_textbox__3ODaX\",\"asyncButton\":\"Counter_asyncButton__2UAr3 Counter_button__1xpSV\"};","export default __webpack_public_path__ + \"static/media/logo.b2e5a01e.svg\";","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n     \n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n      alert(JSON.stringify(action))\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n \n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n// import { fetchCount } from './counterAPI';\n\nconst initialState = {\n  color: \"red\",\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\n// export const incrementAsync = createAsyncThunk(\n//   'counter/fetchCount',\n//   async (amount) => {\n//     const response = await fetchCount(amount);\n//     // The value we return becomes the `fulfilled` action payload\n//     return response.data;\n//   }\n// );\n\nexport const counterSlice = createSlice({\n  name: 'color',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    setcolor: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n    //   state.value += 1;\n    alert()\n    },\n    \n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n//   extraReducers: (builder) => {\n//     builder\n//       .addCase(incrementAsync.pending, (state) => {\n//         state.status = 'loading';\n//       })\n//       .addCase(incrementAsync.fulfilled, (state, action) => {\n//         state.status = 'idle';\n//         state.value += action.payload;\n//       });\n//   },\n});\n\nexport const { setcolor } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n// export const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n// export const incrementIfOdd = (amount) => (dispatch, getState) => {\n \n//   const currentValue = selectCount(getState());\n  \n//   if (currentValue % 2 === 1) {\n//     dispatch(incrementByAmount(amount));\n//   }\n// };\n\nexport default counterSlice.reducer;\n","\nimport {useEffect,useLayoutEffect,useState} from 'react';\nimport {useSelector,useDispatch} from \"react-redux\";\nimport {Photoresponse,Albumrespo} from \"./action/index.js\";\nimport axios from \"axios\";\nimport logo from './logo.svg';\n\nimport { Counter } from './features/counter/Counter';\nimport {Color} from \"./features/color/color\"\nimport './App.css';\nimport './test.scss';\n\n// how react is looking as it this is the \n\nfunction App() {\n  const myState = useSelector((state) => state);\n  const dispatch = useDispatch();\nconst [dataphoto,setphotodata]=useState([])\nconst [dataalbum,setdataalbum]=useState([])\n  // GET request for remote image in node.js\n\n  useEffect(()=>{\n    callalbums();\n    callphoto();\n// console.log(\"myState\",myState)\n\n  },[])\n\n  useEffect(()=>{\n    // console.log(\"myState\",myState.Photocall.data)\n    setphotodata(myState.Photocall.data)\n    setdataalbum(myState.AlbumCall.data)\n  })\n  \n  useEffect(()=>{\n    // if()\n  })\n\n  const callphoto=()=>{\n    axios({\n      method: 'get',\n      url: 'https://jsonplaceholder.typicode.com/photos',\n      responseType: 'stream'\n    }).then((data)=>{\n      dispatch(Photoresponse(data));\n      \n      // setphotodata([...dataphoto,data])\n    console.log(\"data photo\",data.data)\n    }).then(()=>{\n      // console.log(\"myState\",myState)\n    }).catch((err)=>{\n      console.log(err)\n    })\n  }\n  const callalbums=()=>{\n    axios({\n      method: 'get',\n      url: 'https://jsonplaceholder.typicode.com/photos',\n      responseType: 'stream'\n    }).then((data)=>{\n      dispatch(Albumrespo(data));\n      \n      // setdataalbum([...dataalbum,data])\n    console.log(\" daata album\",data)\n    }).catch((err)=>{\n      console.log(err)\n    })\n  }\n\n  \n  return (\n    <div className=\"main p-4\">\n      {dataphoto?\n      \n      dataphoto.map((item,i)=>{\n        return(\n          <div className=\"row\">\n      \n          <div className=\"col-md-12\">\n          <div className=\"float-left text-left\"><h5>Title</h5></div>\n          </div>\n          <div className=\"col-1\">\n            <img src={item.thumbnailUrl} width=\"100\" />\n          </div>\n          <div className=\"col-6\">\n        <h6>{item.id}</h6>\n        <small>{item.title}</small>\n          </div>\n        </div>\n    \n       \n        )\n      })\n      :\n      \"no data\"\n    }\n     \n      </div>\n  );\n}\n\nexport default App;\n","// two wheeler actions\nexport const Photoresponse=(payload)=>{\n    return {\n        type:\"PROPOSALRESPONSE\",\n        payload:payload\n    }\n}\n\n// two wheeler actions\nexport const Albumrespo=(payload)=>{\n    return {\n        type:\"ALBUMRESP\",\n        payload:payload\n    }\n}\n","\n\nimport {combineReducers} from \"redux\";\nimport {Photocall} from \"./home.js\";\nimport {AlbumCall} from \"./albumresp.js\"\n\nconst rootReducer= combineReducers({\n    Photocall,AlbumCall\n})\n\nexport default rootReducer;","// const photodata=\"\";\n// export const photocall=(state=photodata,action)=>{\n//     switch(action.type){\n//         case \"SETPHOTODATA\": state=action.payload;\n//             return state;\n//         default :return state;\n//     }\n// }\n\nconst initialstate=\"\";\nexport const Photocall=(state=initialstate,action)=>{\n    switch(action.type){\n        case \"PROPOSALRESPONSE\": state=action.payload;\n            return state;\n        default :return state;\n    }\n}","\n\nconst initialstate=\"\";\nexport const AlbumCall=(state=initialstate,action)=>{\n    switch(action.type){\n        case \"ALBUMRESP\": state=action.payload;\n            return state;\n        default :return state;\n    }\n}","// import { configureStore, createStore } from '@reduxjs/toolkit';\nimport {createStore} from \"redux\";\nimport counterReducer from '../features/counter/counterSlice';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\n\nimport rootReducer from \"../reducer/index.js\";\n\n\nconst persistConfig = {\n    key: 'root',\n    storage,\n  }\n  const persistedReducer = persistReducer(persistConfig, rootReducer)\n  \n// export const store = configureStore({\n//   reducer: {\n//     counter: counterReducer,\n//   },\n// });\n\n// export const store =createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n// export const persistor = persistStore(store);\n// return { store, persistor }\n// export default () => {\n   \n//     return { store, persistor }\n//   }\nexport const store = createStore(persistedReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\nexport const persistor = persistStore(store, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './store/store';\n\nimport { Provider } from 'react-redux';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}